{"version":3,"sources":["reportWebVitals.js","Main.js","Login.js","Registration.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Main","useState","localStorage","getItem","user","entrys","setEntrys","name","start","stop","hours","minutes","seconds","duration","interrupted","interruptedIndex","newEntry","setNewEntry","entryIndex","setEntryIndex","stopButtonValue","setStopButtonValue","pauseButtonValue","setPauseButtonValue","interruptButtonValue","setInterruptButtonValue","stopWatchValue","setStopWatchValue","setSeconds","setMinutes","setHours","formOfAdress","setFormOfAdress","dates","setDates","dailyEntries","setDailyEntries","weeklyEntries","setWeeklyEntries","monthlyEntries","setMonthlyEntries","index","a","parseInt","getCurrentTime","readDatesOfIndex","newDates","getCurrentDate","String","padStart","storeEntry","stopTime","interruptTime","setItem","pauseTime","today","Date","getHours","getMinutes","toISOString","substring","isDateInThisWeek","date","now","moment","input","isoWeek","isDateInThisMonth","console","log","firebase","database","ref","set","get","snap","val","readDates","setStatistics","allDates","newDailyEntries","count","newWeeklyEntries","newMonthlyEntries","dailyCounter","weeklyCounter","monthlyCounter","i","length","element","find","entry","push","newDailyArray","filter","newWeeklyArray","newMonthlyArray","Logout","className","to","style","color","border","Stopwatch","onChange","onCallback","autoStart","render","formatted","Settings","Button","background","onClick","disabled","Statistics","StatisticsTable","Container","Accordion","Card","Toggle","as","Header","eventKey","Collapse","Body","scope","map","BetterTable","startTime","newArray","idx","deleteEntry","Like","useEffect","on","getWelcomeMessage","id","InputGroup","FormControl","value","e","old","target","Login","username","setUsername","password","setPassword","pwFromDatabase","setPwFromDatabase","errorMessage","setErrorMessage","history","useHistory","onLogin","placeholder","type","Registration","firstPw","setFirstPw","dropdownValue","setDropdownValue","storeUser","getUsername","Dropdown","variant","Menu","adress","Item","validate","App","path","component","basename","process","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","StrictMode","document","getElementById"],"mappings":"uLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wKCGC,SAASQ,IACpB,MAAwBC,mBAASC,aAAaC,QAAQ,aAAtD,mBAAOC,EAAP,KACA,GADA,KAC0BH,mBAAS,KAAnC,mBAAKI,EAAL,KAAaC,EAAb,KACA,EAAgCL,mBAAS,CACrCM,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,SAAU,GACVC,aAAa,EACbC,iBAAkB,IATtB,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,EAAoChB,mBAAS,GAA7C,mBAAOiB,EAAP,KAAmBC,EAAnB,KACA,EAA8ClB,oBAAS,GAAvD,mBAAOmB,EAAP,KAAwBC,EAAxB,KACA,EAAgDpB,oBAAS,GAAzD,mBAAOqB,EAAP,KAAyBC,EAAzB,KACA,EAAwDtB,oBAAS,GAAjE,mBAAOuB,EAAP,KAA6BC,EAA7B,KACA,EAA4CxB,oBAAS,GAArD,mBAAOyB,EAAP,KAAuBC,EAAvB,KACA,EAA8B1B,mBAAS,GAAvC,mBAAOW,EAAP,KAAgBgB,EAAhB,KACA,GAA8B3B,mBAAS,GAAvC,qBAAOU,GAAP,MAAgBkB,GAAhB,MACA,GAA0B5B,mBAAS,GAAnC,qBAAOS,GAAP,MAAcoB,GAAd,MACA,GAAwC7B,mBAAS,IAAjD,qBAAO8B,GAAP,MAAqBC,GAArB,MACA,GAA0B/B,mBAAS,IAAnC,qBAAOgC,GAAP,MAAcC,GAAd,MACA,GAAwCjC,mBAAS,IAAjD,qBAAOkC,GAAP,MAAqBC,GAArB,MACA,GAA0CnC,mBAAS,IAAnD,qBAAOoC,GAAP,MAAsBC,GAAtB,MACA,GAA4CrC,mBAAS,IAArD,qBAAOsC,GAAP,MAAuBC,GAAvB,MA1B2B,8CAuC3B,WAAyBC,GAAzB,iBAAAC,EAAA,0DACsC,IAA9BrC,EAAOoC,GAAO3B,YADtB,gBAEYC,EAAmB4B,SAASzC,aAAaC,QAAQC,EAAO,gBAC5DyB,GAAWxB,EAAOU,GAAkBJ,SACpCiB,EAAWvB,EAAOU,GAAkBH,SACpCkB,GAASzB,EAAOU,GAAkBL,OAL1C,8BAQQL,EAAOoC,GAAOjC,MAAQoC,KAR9B,UAS+BC,GAAiBJ,GAThD,QAScK,EATd,OAYYZ,GADAY,EACS,GAAD,mBAAKA,GAAL,CAAeC,OAEd,CAACA,OAGdlB,GAAW,GACXD,EAAW,GACXE,GAAS,GACTzB,EAAOoC,GAAO5B,SAAWmC,OAAOtC,IAAOuC,SAAS,EAAG,KAAO,IAAMD,OAAOrC,IAASsC,SAAS,EAAG,KAAO,IAAMD,OAAOpC,GAASqC,SAAS,EAAG,KACrIC,GAAW9C,EAAMqC,GArBzB,QAwBItB,EAAcsB,GACdd,GAAkB,GAClBN,GAAmB,GACnBE,GAAoB,GACpBE,GAAwB,GACxByB,GAAW9C,EAAMqC,GA7BrB,6CAvC2B,sBAuE3B,SAASU,KAYLvB,EAAW,GACXC,GAAW,GACXC,GAAS,GACTH,GAAkB,GAClBN,GAAmB,GACnBE,GAAoB,GACpBE,GAAwB,GAhBxBpB,EAAOa,GAAYT,KAAOmC,KAC1BvC,EAAOa,GAAYL,SAAWmC,OAAOtC,IAAOuC,SAAS,EAAG,KAAO,IAAMD,OAAOrC,IAASsC,SAAS,EAAG,KAAO,IAAMD,OAAOpC,GAASqC,SAAS,EAAG,KAC1I5C,EAAOa,GAAYR,MAAQA,GAC3BL,EAAOa,GAAYP,QAAUA,GAC7BN,EAAOa,GAAYN,QAAUA,EAE7BsC,GAAW9C,EAAMc,GAarB,SAASkC,KACL/C,EAAOa,GAAYJ,aAAc,EACjCZ,aAAamD,QAAQjD,EAAO,cAAe4C,OAAO9B,IAElDiC,KAGJ,SAASG,KAED3B,GADmB,IAAnBD,GAoBR,SAASkB,KACL,IAAIW,EAAQ,IAAIC,KAChB,OAAOR,OAAOO,EAAME,YAAYR,SAAS,EAAG,KAAO,IAAMD,OAAOO,EAAMG,cAAcT,SAAS,EAAG,KAGpG,SAASF,KACL,OAAO,IAAIS,MAAOG,cAAcC,UAAU,EAAG,IAGjD,SAASC,GAAiBC,GACtB,IAAIC,EAAMC,IACNC,EAAQD,EAAOF,EAAO,cAC1B,OAAQC,EAAIG,WAAaD,EAAMC,UAGnC,SAASC,GAAkBL,GACvB,OAAOA,EAAKF,UAAU,EAAG,IAAMb,KAAiBa,UAAU,EAAG,GAgBjE,SAASV,GAAW9C,EAAMqC,GACtB2B,QAAQC,IAAI,SAAWnD,GACX,MAARd,IACAkE,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAYqE,IAAIpE,GAC9DiE,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAcqC,EAAQ,UAAUgC,IAAIxC,KA5J/D,SAiLZY,GAjLY,iFAiL3B,WAAgCJ,GAAhC,eAAAC,EAAA,sEAEuB4B,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAcqC,EAAQ,UAAUiC,MAFrG,cAEUC,EAFV,OAGIP,QAAQC,IAAI,SAAW5B,EAAQ,YAAckC,EAAKC,OAHtD,kBAKWD,EAAKC,OALhB,4CAjL2B,+BAyLZC,KAzLY,8EAyL3B,4BAAAnC,EAAA,sEAEuB4B,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAYsE,MAFjF,YAEUC,EAFV,QAIaC,MAJb,uBAKQR,QAAQC,IAAI,aAAeM,EAAKC,OALxC,kBAMeD,EAAKC,OANpB,4CAzL2B,+BAmMZE,KAnMY,8EAmM3B,kDAAApC,EAAA,6DAEIN,GADiB,IADrB,SAI2ByC,KAJ3B,OAaI,GATME,EAJV,OAMUC,EAAkB,CAAC,CAACzE,KAAM,GAAI0E,MAAO,IACrCC,EAAmB,CAAC,CAAC3E,KAAM,GAAI0E,MAAO,IACtCE,EAAoB,CAAC,CAAC5E,KAAM,GAAI0E,MAAO,IACzCG,EAAe,EACfC,EAAgB,EAChBC,EAAiB,EAEjBP,EACA,IADW,EAAD,SACDQ,GACL,GAAIR,EAASQ,GAAGtD,MACZ,IAAK,IAAI6B,EAAO,EAAGA,EAAOiB,EAASQ,GAAGtD,MAAMuD,OAAQ1B,IAAQ,CAExD,GAAIiB,EAASQ,GAAGtD,MAAM6B,IAASf,KAAkB,CAC7C,IAAM0C,EAAUT,EAAgBU,MAAK,SAAAC,GAAK,OAAIA,EAAMpF,OAASwE,EAASQ,GAAGhF,QACrEkF,GACAL,GAAgB,EAChBK,EAAQR,MAAQG,IAEhBA,EAAe,EACfJ,EAAgBY,KAAK,CAACrF,KAAMwE,EAASQ,GAAGhF,KAAM0E,MAAOG,KAI7D,GAAIvB,GAAiBkB,EAASQ,GAAGtD,MAAM6B,IAAQ,CAC3C,IAAM2B,EAAUP,EAAiBQ,MAAK,SAAAC,GAAK,OAAIA,EAAMpF,OAASwE,EAASQ,GAAGhF,QACtEkF,GACAJ,GAAiB,EACjBI,EAAQR,MAAQI,IAEhBA,EAAgB,EAChBH,EAAiBU,KAAK,CAACrF,KAAMwE,EAASQ,GAAGhF,KAAM0E,MAAOI,KAI9D,GAAIlB,GAAkBY,EAASQ,GAAGtD,MAAM6B,IAAQ,CAC5C,IAAM2B,EAAUN,EAAkBO,MAAK,SAAAC,GAAK,OAAIA,EAAMpF,OAASwE,EAASQ,GAAGhF,QACvEkF,GACAH,GAAkB,EAClBG,EAAQR,MAAQK,IAEhBA,EAAiB,EACjBH,EAAkBS,KAAK,CAACrF,KAAMwE,EAASQ,GAAGhF,KAAM0E,MAAOK,QAjClEC,EAAI,EAAGA,EAAIR,EAASS,OAAQD,IAAM,EAAlCA,GAwCTM,EAAgBb,EAAgBc,QAAO,SAAAH,GAAK,MAAmB,KAAfA,EAAMpF,QAC1D6B,GAAgB,YAAIyD,IAEhBE,EAAiBb,EAAiBY,QAAO,SAAAH,GAAK,MAAmB,KAAfA,EAAMpF,QAC5D+B,GAAiB,YAAIyD,IAEjBC,EAAkBb,EAAkBW,QAAO,SAAAH,GAAK,MAAmB,KAAfA,EAAMpF,QAC9DiC,GAAkB,YAAIwD,IA7D1B,6CAnM2B,sBAwR3B,SAASC,KACL,OACI,8BACI,qBAAIC,UAAU,SAAd,wBAAkC,cAAC,IAAD,CAASA,UAAW,eACXC,GAAG,SADZ,SACqB,cAAC,IAAD,CACnDC,MAAO,CAACC,MAAO,UAAWC,OAAQ,oBAKlD,SAASC,KACL,OACI,cAAC,IAAD,CACI3F,QAASA,EACTD,QAASA,GACTD,MAAOA,GACP8F,SAAU,YAAgC,IAA9B9F,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QACxBgB,EAAWhB,GACXiB,GAAWlB,GACXmB,GAASpB,IAGb+F,WAAY,kBAAMrC,QAAQC,IAAI,WAC9BqC,UAAWhF,EACXiF,OAAQ,YAAkB,IAAhBC,EAAe,EAAfA,UACN,OACI,8BACI,4BACKA,SAS7B,SAASC,KACL,OACI,sBAAKX,UAAU,YAAf,UACI,uBACA,oBAAIA,UAAW,UAAf,6BACA,uBACA,oBAAIA,UAAW,YAAf,SAA4B,cAACK,GAAD,MAC5B,uBACA,cAACO,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAAS1D,GAC5D2D,SAAU3F,EADlB,0BANJ,SAQI,cAACwF,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAAS7D,GAC5D8D,SAAU7F,EADlB,kBARJ,SAUI,cAAC0F,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAAS5D,GAC5D6D,SAAUzF,EADlB,uBAEA,uBACA,0BAKZ,SAAS0F,KACL,OACI,sBAAKhB,UAAU,YAAf,UACI,uBACA,oBAAIA,UAAW,UAAf,iCACA,uBACA,cAACY,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAASlC,GAApE,6BAEA,uBACA,uBACA,cAACqC,GAAD,IACA,uBACA,0BAKZ,SAASA,KACL,OACI,8BACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,IAA5C,mBAGA,cAACL,EAAA,EAAUM,SAAX,CAAoBD,SAAS,IAA7B,SACI,cAACJ,EAAA,EAAKM,KAAN,UACI,kCACI,gCACA,+BACI,oBAAIC,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,uBAGJ,gCACC1F,GAAa2F,KAAI,SAACnC,EAAOlD,GAAR,OACd,qBAAgByD,UAAW,YAA3B,UACI,6BAAKP,EAAMV,QACX,6BAAKU,EAAMpF,SAFNkC,kBAU7B,eAAC6E,EAAA,EAAD,WACI,cAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,IAA5C,oBAGA,cAACL,EAAA,EAAUM,SAAX,CAAoBD,SAAS,IAA7B,SACI,cAACJ,EAAA,EAAKM,KAAN,UACI,kCACI,gCACA,+BACI,oBAAIC,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,uBAGJ,gCACCxF,GAAcyF,KAAI,SAACnC,EAAOlD,GAAR,OACf,qBAAgByD,UAAW,YAA3B,UACI,6BAAKP,EAAMV,QACX,6BAAKU,EAAMpF,SAFNkC,kBAU7B,eAAC6E,EAAA,EAAD,WACI,cAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,IAA5C,qBAGA,cAACL,EAAA,EAAUM,SAAX,CAAoBD,SAAS,IAA7B,SACI,cAACJ,EAAA,EAAKM,KAAN,UACI,kCACI,gCACA,+BACI,oBAAIC,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,uBAGJ,gCACCtF,GAAeuF,KAAI,SAACnC,EAAOlD,GAAR,OAChB,qBAAgByD,UAAW,YAA3B,UACI,6BAAKP,EAAMV,QACX,6BAAKU,EAAMpF,SAFNkC,yBAmBjD,SAASsF,KACL,OACI,qBAAK7B,UAAU,eAAf,SACI,kCACI,gCACA,+BACI,oBAAI2B,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,6BACA,oBAAIA,MAAM,MAAV,yBAGJ,gCACmB,IAAlBxH,EAAOmF,OAAe,wBAASnF,EAAOyH,KAAI,SAACnC,EAAOlD,GAAR,OACvC,qBAAgByD,UAAW,YAA3B,UACI,6BAAKP,EAAMpF,OACX,6BAAKoF,EAAMnF,QACX,6BAAKmF,EAAMlF,OACX,6BAAKkF,EAAM9E,WACX,6BACI,cAACiG,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WACvCU,QAAS,kBAldlB,4CAkdwBgB,CAAUvF,IADjC,qBAGJ,6BACI,qBAAKuE,QAAS,kBAjN1C,SAAqBvE,GACjB,IAAIwF,EAAW5H,EAAOyF,QAAO,SAACH,EAAOuC,GAAR,OAAgBA,IAAQzF,KACrDnC,EAAU2H,GAEE,MAAR7H,GACAkE,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAYqE,IAAIwD,GA4MtBE,CAAY1F,IAAhC,SACI,cAAC2F,EAAD,UAXH3F,aAsB7B,OApcA4F,qBAAU,WAoINjE,QAAQC,IAAI,aAEZ/D,EADe,IAOfgE,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAYkI,GAAG,SAAS,SAAC3D,GAC/DA,EAAKC,QACLR,QAAQC,IAAI,YAAaM,EAAKC,OAC9BtE,EAAUqE,EAAKC,WA9DvBN,IAASC,WAAWC,IAAI,aAAepE,EAAO,aAAakI,GAAG,SAAS,SAAC3D,GAChEA,EAAKC,QACLR,QAAQC,IAAI,aAAcM,EAAKC,OAC/B5C,GAAgB2C,EAAKC,MAAM7C,oBAjFpC,IAmcC,gCACI,cAACkE,GAAD,IACA,+BAzVR,WACI,IAAIvF,GAAQ,IAAI8C,MAAOC,WAEvB,OAAI/C,GAAS,GAAKA,EAAQ,GACf,iBACAA,GAAS,IAAMA,EAAQ,GACvB,mBACAA,GAAS,IAAMA,EAAQ,EACvB,sBADJ,EAkVE6H,GAAL,IAA2BxG,GAAe3B,EACtC,0BAEJ,uBACA,uBACA,uBAGA,uCACA,uBACA,2CACA,sBAAK8F,UAAW,SAAUsC,GAAI,WAA9B,UACI,cAACC,EAAA,EAAD,CAAYvC,UAAU,kBAAtB,SACI,cAACwC,EAAA,EAAD,CACI,aAAW,UACX,mBAAiB,4BACjBC,MAAO3H,EAAST,KAChBiG,SAAU,SAAAoC,GAAC,OAAI3H,GAAY,SAAA4H,GAAG,kCAASA,GAAT,IAActI,KAAMqI,EAAEE,OAAOH,gBAGnE,cAAC7B,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAvdvE,WACI3G,EAAOuF,KAAK5E,GACZkC,GAAW9C,EAAMc,IAqdT,oBAEJ,uBACA,uBACA,cAAC6G,GAAD,IACA,uBACA,cAACjB,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAhPnE,WACI,IAAIiB,EAAW,GACf3H,EAAU2H,GAEE,MAAR7H,GACAkE,IAASC,WAAWC,IAAI,aAAepE,EAAO,YAAYqE,IAAIwD,IA2O9D,wBACA,uBACA,uBAEA,cAACpB,GAAD,IACA,uBACA,uBACA,uBACA,cAACK,GAAD,OAMZ,SAASkB,IACL,OAAQ,cAAC,IAAD,IChhBG,SAASW,IACpB,MAAgC9I,mBAAS,IAAzC,mBAAO+I,EAAP,KAAiBC,EAAjB,KACA,EAAgChJ,mBAAS,IAAzC,mBAAOiJ,EAAP,KAAiBC,EAAjB,KACA,EAA4ClJ,mBAAS,IAArD,mBAAOmJ,EAAP,KAAuBC,EAAvB,KACA,EAAwCpJ,mBAAS,IAAjD,mBAAOqJ,EAAP,KAAqBC,EAArB,KAEMC,EAAUC,cAEhB,SAASC,IAqBLpF,IAASC,WAAWC,IAAI,aAAewE,EAAW,aAAaV,GAAG,SAAS,SAAC3D,GACpEA,EAAKC,OACLR,QAAQC,IAAI,aAAcM,EAAKC,OAC/ByE,EAAkB1E,EAAKC,MAAMsE,WAI7BK,EAAgB,yBAM5B,OA9BAlB,qBAAU,WACU,KAAba,GAAsC,KAAnBE,IACdF,IAAaE,GACbhF,QAAQC,IAAI,oBACZnE,aAAamD,QAAQ,WAAY2F,GACjCQ,EAAQ5D,KAAK,WACb2D,EAAgB,KAGhBA,EAAgB,yBAIzB,CAACH,IAkBA,gCACI,wCAAe,uBACf,uCACA,qBAAKlD,UAAW,SAAUsC,GAAI,WAA9B,SACI,cAACC,EAAA,EAAD,CAAYvC,UAAW,kBAAvB,SACI,cAACwC,EAAA,EAAD,CACI,aAAW,UACXiB,YAAY,WACZhB,MAAOK,EACPxC,SAAU,SAAAoC,GAAC,OAAIK,EAAYL,EAAEE,OAAOH,cAIhD,uBACA,qBAAKzC,UAAW,SAAUsC,GAAI,WAA9B,SACI,cAACC,EAAA,EAAD,CAAYvC,UAAW,kBAAvB,SACI,cAACwC,EAAA,EAAD,CACI,aAAW,UACXkB,KAAK,WACLD,YAAY,WACZhB,MAAOO,EACP1C,SAAU,SAAAoC,GAAC,OAAIO,EAAYP,EAAEE,OAAOH,cAIhD,oBAAIH,GAAI,eAAR,SAAyBc,IACzB,uBACA,cAACxC,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAW,UAAWT,OAAO,WAAYU,QAAS,kBAAM0C,KAAxE,mBACA,uBACA,6DAA+B,cAAC,IAAD,CAASxD,UAAW,aAAcC,GAAG,gBAArC,4B,kBCzE5B,SAAS0D,IACpB,MAAgC5J,mBAAS,IAAzC,mBAAO+I,EAAP,KAAiBC,EAAjB,KACA,EAAgChJ,mBAAS,IAAzC,mBAAOiJ,EAAP,KAAiBC,EAAjB,KACA,EAA8BlJ,mBAAS,IAAvC,mBAAO6J,EAAP,KAAgBC,EAAhB,KACA,EAAwC9J,mBAAS,IAAjD,mBAAOqJ,EAAP,KAAqBC,EAArB,KACA,EAA0CtJ,mBAAS,IAAnD,mBAAO+J,EAAP,KAAsBC,EAAtB,KAIMT,EAAUC,cAEhB,SAASS,IACL5F,IAASC,WAAWC,IAAI,aAAewE,EAAW,sBAAsBvE,IAAIyE,GAC5E5E,IAASC,WAAWC,IAAI,aAAewE,EAAW,0BAA0BvE,IAAIuF,GAbjD,SAgBpBG,IAhBoB,2EAgBnC,4BAAAzH,EAAA,sEAEuB4B,IAASC,WAAWC,IAAI,aAAewE,GAAUtE,MAFxE,YAEUC,EAFV,QAGaC,MAHb,uBAIQR,QAAQC,IAAIM,EAAKC,OAJzB,mBAKe,GALf,iCAOW,GAPX,4CAhBmC,kEA0BnC,sBAAAlC,EAAA,sEACoCyH,IADpC,cAgBQZ,EAAgB,0BAZZO,IAAYZ,EACRF,EAASxD,OAAS,GAClB0E,IACA9F,QAAQC,IAAI2E,GACZQ,EAAQ5D,KAAK,WAEb2D,EAAgB,sBAGpBA,EAAgB,0BAb5B,4CA1BmC,sBA+CnC,OACI,gCACI,wCAAe,uBACf,8CACA,uBAEA,eAACa,EAAA,EAAD,WACI,cAACA,EAAA,EAAS7C,OAAV,CAAiB8C,QAAQ,UAAU7B,GAAG,iBACrBpC,MAAO,CAACW,WAAY,UAAWT,OAAQ,WADxD,4BAIA,cAAC8D,EAAA,EAASE,KAAV,UAnDO,CAAC,CAAC3B,MAAO,QAAS,CAACA,MAAO,QAAS,CAACA,MAAO,UAoDhCb,KAAI,SAACyC,EAAQ9H,GAAT,OAAmB,cAAC2H,EAAA,EAASI,KAAV,CAEjCxD,QAAS,kBAAMiD,EAAiBM,EAAO5B,QAFN,SAEe4B,EAAO5B,OADlDlG,WAKjB,uBAEA,qBAAKyD,UAAW,SAAUsC,GAAI,WAA9B,SACI,cAACC,EAAA,EAAD,CAAYvC,UAAW,kBAAvB,SACI,cAACwC,EAAA,EAAD,CACI,aAAW,UACXiB,YAAY,WACZhB,MAAOK,EACPxC,SAAU,SAAAoC,GAAC,OAAIK,EAAYL,EAAEE,OAAOH,cAMhD,uBAEA,qBAAKzC,UAAW,SAAUsC,GAAI,WAA9B,SACI,cAACC,EAAA,EAAD,CAAYvC,UAAW,kBAAvB,SACI,cAACwC,EAAA,EAAD,CACI,aAAW,UAAUkB,KAAK,WAC1BD,YAAY,WACZhB,MAAOmB,EACPtD,SAAU,SAAAoC,GAAC,OAAImB,EAAWnB,EAAEE,OAAOH,cAM/C,uBAEA,qBAAKzC,UAAW,SAAUsC,GAAI,WAA9B,SACI,cAACC,EAAA,EAAD,CAAYvC,UAAW,kBAAvB,SACI,cAACwC,EAAA,EAAD,CACI,aAAW,UAAUkB,KAAK,WAC1BD,YAAY,mBACZhB,MAAOO,EACP1C,SAAU,SAAAoC,GAAC,OAAIO,EAAYP,EAAEE,OAAOH,cAIhD,oBAAIH,GAAI,eAAR,SAAyBc,IACzB,uBACA,cAACxC,EAAA,EAAD,CAAQV,MAAO,CAACW,WAAY,UAAWT,OAAQ,WAAYU,QAAS,kBA3GzC,0CA2G+CyD,IAA1E,qBAEA,2DAA6B,cAAC,IAAD,CAASvE,UAAW,aAAcC,GAAG,SAArC,2BCxG1B,SAASuE,IAGpB,OACI,8BACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,SAAUC,UAAW7B,EAAO8B,SAAUC,YACnD,cAAC,IAAD,CAAOH,KAAM,gBAAiBC,UAAWf,EAAcgB,SAAUC,YACjE,cAAC,IAAD,CAAOH,KAAM,UAAWC,UAAW5K,EAAM6K,SAAUC,YACnD,cAAC,IAAD,CAAOH,KAAM,IAAKE,SAAUC,UAA5B,SACI,cAAC,IAAD,CAAU3E,GAAG,oBCFrC7B,IAASyG,cAVc,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,mDACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAInBC,IAAS7E,OACL,cAAC,IAAM8E,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5BpM,M","file":"static/js/main.a5b6d534.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\r\nimport firebase from 'firebase';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport ReactStopwatch from 'react-stopwatch';\r\nimport {Button, FormControl, InputGroup, Container, Card, Accordion} from \"react-bootstrap\";\r\nimport {DoorClosedFill, Square} from \"react-bootstrap-icons\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as moment from \"moment\";\r\n\r\n\r\nexport default function Main() {\r\n    const [user, setUser] = useState(localStorage.getItem('username'))\r\n    let [entrys, setEntrys] = useState([])\r\n    const [newEntry, setNewEntry] = useState({\r\n        name: '',\r\n        start: '',\r\n        stop: '',\r\n        hours: '',\r\n        minutes: '',\r\n        seconds: '',\r\n        duration: '',\r\n        interrupted: false,\r\n        interruptedIndex: 0\r\n    })\r\n    const [entryIndex, setEntryIndex] = useState(0)\r\n    const [stopButtonValue, setStopButtonValue] = useState(true);\r\n    const [pauseButtonValue, setPauseButtonValue] = useState(true);\r\n    const [interruptButtonValue, setInterruptButtonValue] = useState(true);\r\n    const [stopWatchValue, setStopWatchValue] = useState(false);\r\n    const [seconds, setSeconds] = useState(0)\r\n    const [minutes, setMinutes] = useState(0)\r\n    const [hours, setHours] = useState(0)\r\n    const [formOfAdress, setFormOfAdress] = useState('')\r\n    const [dates, setDates] = useState([])\r\n    const [dailyEntries, setDailyEntries] = useState([])\r\n    const [weeklyEntries, setWeeklyEntries] = useState([])\r\n    const [monthlyEntries, setMonthlyEntries] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        loadContent()\r\n        findFormOfAdress()\r\n    }, [])\r\n\r\n    function saveEntry() {\r\n        entrys.push(newEntry)\r\n        storeEntry(user, entryIndex)\r\n    }\r\n\r\n    async function startTime(index) {\r\n        if (entrys[index].interrupted === true) {\r\n            let interruptedIndex = parseInt(localStorage.getItem(user + \": index -> \"))\r\n            setMinutes(entrys[interruptedIndex].minutes)\r\n            setSeconds(entrys[interruptedIndex].seconds)\r\n            setHours(entrys[interruptedIndex].hours)\r\n        } else {\r\n\r\n            entrys[index].start = getCurrentTime()\r\n            const newDates = await readDatesOfIndex(index)\r\n\r\n            if (newDates) {\r\n                setDates([...newDates, getCurrentDate()])\r\n            } else {\r\n                setDates([getCurrentDate()])\r\n            }\r\n\r\n            setMinutes(0)\r\n            setSeconds(0)\r\n            setHours(0)\r\n            entrys[index].duration = String(hours).padStart(2, \"0\") + ':' + String(minutes).padStart(2, \"0\") + ':' + String(seconds).padStart(2, \"0\")\r\n            storeEntry(user, index)\r\n\r\n        }\r\n        setEntryIndex(index)\r\n        setStopWatchValue(true)\r\n        setStopButtonValue(false)\r\n        setPauseButtonValue(false)\r\n        setInterruptButtonValue(false)\r\n        storeEntry(user, index)\r\n    }\r\n\r\n    function stopTime() {\r\n        resetValues()\r\n        entrys[entryIndex].stop = getCurrentTime()\r\n        entrys[entryIndex].duration = String(hours).padStart(2, \"0\") + ':' + String(minutes).padStart(2, \"0\") + ':' + String(seconds).padStart(2, \"0\")\r\n        entrys[entryIndex].hours = hours\r\n        entrys[entryIndex].minutes = minutes\r\n        entrys[entryIndex].seconds = seconds\r\n\r\n        storeEntry(user, entryIndex)\r\n    }\r\n\r\n    function resetValues() {\r\n        setSeconds(0)\r\n        setMinutes(0)\r\n        setHours(0)\r\n        setStopWatchValue(false)\r\n        setStopButtonValue(true)\r\n        setPauseButtonValue(true)\r\n        setInterruptButtonValue(true)\r\n    }\r\n\r\n    function interruptTime() {\r\n        entrys[entryIndex].interrupted = true\r\n        localStorage.setItem(user + \": index -> \", String(entryIndex))\r\n\r\n        stopTime()\r\n    }\r\n\r\n    function pauseTime() {\r\n        if (stopWatchValue === false) {\r\n            setStopWatchValue(true)\r\n        } else {\r\n            setStopWatchValue(false)\r\n        }\r\n\r\n    }\r\n\r\n    function findFormOfAdress() {\r\n        // on() method\r\n        firebase.database().ref('usernames/' + user + '/security').on('value', (snap) => {\r\n            if (snap.val()) {\r\n                console.log(\"snap.val()\", snap.val())\r\n                setFormOfAdress(snap.val().formOfAdress)\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    function getCurrentTime() {\r\n        let today = new Date()\r\n        return String(today.getHours()).padStart(2, \"0\") + ':' + String(today.getMinutes()).padStart(2, \"0\")\r\n    }\r\n\r\n    function getCurrentDate() {\r\n        return new Date().toISOString().substring(0, 10)\r\n    }\r\n\r\n    function isDateInThisWeek(date) {\r\n        let now = moment();\r\n        let input = moment(date + \"T11:45:00Z\");\r\n        return (now.isoWeek() == input.isoWeek())\r\n    }\r\n\r\n    function isDateInThisMonth(date) {\r\n        return date.substring(5, 7) == getCurrentDate().substring(5, 7)\r\n\r\n    }\r\n\r\n    function getWelcomeMessage() {\r\n        let hours = new Date().getHours()\r\n\r\n        if (hours >= 0 && hours < 12) {\r\n            return \"Good Morning, \"\r\n        } else if (hours >= 12 && hours < 18) {\r\n            return \"Good Afternoon, \"\r\n        } else if (hours >= 18 && hours < 0) {\r\n            return \"Good Evening, \"\r\n        }\r\n    }\r\n\r\n    function storeEntry(user, index) {\r\n        console.log(\"entry:\" + entryIndex)\r\n        if (user != null) {\r\n            firebase.database().ref('usernames/' + user + '/entries').set(entrys);\r\n            firebase.database().ref('usernames/' + user + '/entries/' + index + \"/dates\").set(dates);\r\n        }\r\n    }\r\n\r\n    function loadContent() {\r\n        console.log(\"loading..\")\r\n        let newArray = []\r\n        setEntrys(newArray)\r\n        readEntrys()\r\n    }\r\n\r\n    function readEntrys() {\r\n        // on() method\r\n        firebase.database().ref('usernames/' + user + '/entries').on('value', (snap) => {\r\n            if (snap.val()) {\r\n                console.log(\"Entries: \", snap.val())\r\n                setEntrys(snap.val())\r\n            }\r\n        })\r\n    }\r\n\r\n    async function readDatesOfIndex(index) {\r\n        // on() method\r\n        const snap = await firebase.database().ref('usernames/' + user + '/entries/' + index + '/dates').get()\r\n        console.log(\"index:\" + index + \" | dates:\" + snap.val())\r\n\r\n        return snap.val();\r\n    }\r\n\r\n    async function readDates() {\r\n        // on() method\r\n        const snap = await firebase.database().ref('usernames/' + user + '/entries').get()\r\n\r\n        if (snap.val()) {\r\n            console.log(\"All Dates:\" + snap.val())\r\n            return snap.val();\r\n        }\r\n    }\r\n\r\n    async function setStatistics() {\r\n        let emptyArray = []\r\n        setDailyEntries(emptyArray)\r\n\r\n        const allDates = await readDates()\r\n\r\n        const newDailyEntries = [{name: '', count: 0}];\r\n        const newWeeklyEntries = [{name: '', count: 0}];\r\n        const newMonthlyEntries = [{name: '', count: 0}];\r\n        let dailyCounter = 1\r\n        let weeklyCounter = 1\r\n        let monthlyCounter = 1\r\n\r\n        if (allDates) {\r\n            for (let i = 0; i < allDates.length; i++) {\r\n                if (allDates[i].dates) {\r\n                    for (let date = 0; date < allDates[i].dates.length; date++) {\r\n                        //Statistiken für den Tag\r\n                        if (allDates[i].dates[date] == getCurrentDate()) {\r\n                            const element = newDailyEntries.find(entry => entry.name === allDates[i].name);\r\n                            if (element) {\r\n                                dailyCounter += 1\r\n                                element.count = dailyCounter\r\n                            } else {\r\n                                dailyCounter = 1\r\n                                newDailyEntries.push({name: allDates[i].name, count: dailyCounter})\r\n                            }\r\n                        }\r\n                        //Statistiken für die Woche\r\n                        if (isDateInThisWeek(allDates[i].dates[date])) {\r\n                            const element = newWeeklyEntries.find(entry => entry.name === allDates[i].name);\r\n                            if (element) {\r\n                                weeklyCounter += 1\r\n                                element.count = weeklyCounter\r\n                            } else {\r\n                                weeklyCounter = 1\r\n                                newWeeklyEntries.push({name: allDates[i].name, count: weeklyCounter})\r\n                            }\r\n                        }\r\n                        //Statistiken für den Monat\r\n                        if (isDateInThisMonth(allDates[i].dates[date])) {\r\n                            const element = newMonthlyEntries.find(entry => entry.name === allDates[i].name);\r\n                            if (element) {\r\n                                monthlyCounter += 1\r\n                                element.count = monthlyCounter\r\n                            } else {\r\n                                monthlyCounter = 1\r\n                                newMonthlyEntries.push({name: allDates[i].name, count: monthlyCounter})\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let newDailyArray = newDailyEntries.filter(entry => entry.name !== '');\r\n        setDailyEntries([...newDailyArray]);\r\n\r\n        let newWeeklyArray = newWeeklyEntries.filter(entry => entry.name !== '');\r\n        setWeeklyEntries([...newWeeklyArray]);\r\n\r\n        let newMonthlyArray = newMonthlyEntries.filter(entry => entry.name !== '');\r\n        setMonthlyEntries([...newMonthlyArray]);\r\n\r\n    }\r\n\r\n    function deleteEntry(index) {\r\n        let newArray = entrys.filter((entry, idx) => idx !== index);\r\n        setEntrys(newArray);\r\n\r\n        if (user != null) {\r\n            firebase.database().ref('usernames/' + user + '/entries').set(newArray);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function deleteAll() {\r\n        let newArray = []\r\n        setEntrys(newArray)\r\n\r\n        if (user != null) {\r\n            firebase.database().ref('usernames/' + user + '/entries').set(newArray);\r\n        }\r\n    }\r\n\r\n    function Logout() {\r\n        return (\r\n            <div>\r\n                <h4 className=\"logout\">S E M E R U<NavLink className={\"logoutButton\"}\r\n                                                           to=\"/login\"><DoorClosedFill\r\n                    style={{color: \"#526b4d\", border: \"#526b4d\"}}/></NavLink></h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function Stopwatch() {\r\n        return (\r\n            <ReactStopwatch\r\n                seconds={seconds}\r\n                minutes={minutes}\r\n                hours={hours}\r\n                onChange={({hours, minutes, seconds}) => {\r\n                    setSeconds(seconds)\r\n                    setMinutes(minutes)\r\n                    setHours(hours)\r\n                }\r\n                }\r\n                onCallback={() => console.log('Finish')}\r\n                autoStart={stopWatchValue}\r\n                render={({formatted}) => {\r\n                    return (\r\n                        <div>\r\n                            <p>\r\n                                {formatted}\r\n                            </p>\r\n                        </div>\r\n                    );\r\n                }}\r\n            />\r\n        )\r\n    }\r\n\r\n    function Settings() {\r\n        return (\r\n            <div className=\"component\">\r\n                <br/>\r\n                <h4 className={\"setting\"}>S E T T I N G S</h4>\r\n                <br/>\r\n                <h3 className={\"stopwatch\"}><Stopwatch/></h3>\r\n                <br/>\r\n                <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={pauseTime}\r\n                        disabled={pauseButtonValue}>Pause/Resume</Button>&emsp;\r\n                <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={stopTime}\r\n                        disabled={stopButtonValue}>Stop</Button>&emsp;\r\n                <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={interruptTime}\r\n                        disabled={interruptButtonValue}>Interrupt</Button>\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function Statistics() {\r\n        return (\r\n            <div className=\"component\">\r\n                <br/>\r\n                <h4 className={\"setting\"}>S T A T I S T I C S</h4>\r\n                <br/>\r\n                <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={setStatistics}>Load\r\n                    Statistics</Button>\r\n                <br/>\r\n                <br/>\r\n                <StatisticsTable></StatisticsTable>\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function StatisticsTable() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                Daily\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <table>\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Amount</th>\r\n                                            <th scope=\"col\">Name</th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {dailyEntries.map((entry, index) =>\r\n                                            <tr key={index} className={\"tableBody\"}>\r\n                                                <td>{entry.count}</td>\r\n                                                <td>{entry.name}</td>\r\n                                            </tr>\r\n                                        )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n                                Weekly\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body>\r\n                                    <table>\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Amount</th>\r\n                                            <th scope=\"col\">Name</th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {weeklyEntries.map((entry, index) =>\r\n                                            <tr key={index} className={\"tableBody\"}>\r\n                                                <td>{entry.count}</td>\r\n                                                <td>{entry.name}</td>\r\n                                            </tr>\r\n                                        )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"2\">\r\n                                Monthly\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"2\">\r\n                                <Card.Body>\r\n                                    <table>\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Amount</th>\r\n                                            <th scope=\"col\">Name</th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {monthlyEntries.map((entry, index) =>\r\n                                            <tr key={index} className={\"tableBody\"}>\r\n                                                <td>{entry.count}</td>\r\n                                                <td>{entry.name}</td>\r\n                                            </tr>\r\n                                        )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </Container>\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n    function BetterTable() {\r\n        return (\r\n            <div className=\"tableFixHead\">\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Start Time</th>\r\n                        <th scope=\"col\">End Time</th>\r\n                        <th scope=\"col\">Duration</th>\r\n                        <th scope=\"col\">Start / Restart</th>\r\n                        <th scope=\"col\">Delete</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {entrys.length === 0 ? <div/> : entrys.map((entry, index) =>\r\n                        <tr key={index} className={\"tableBody\"}>\r\n                            <td>{entry.name}</td>\r\n                            <td>{entry.start}</td>\r\n                            <td>{entry.stop}</td>\r\n                            <td>{entry.duration}</td>\r\n                            <td>\r\n                                <Button style={{background: \"#526b4d\", border: \"#526b4d\"}}\r\n                                        onClick={() => startTime(index)}>Start</Button>\r\n                            </td>\r\n                            <td>\r\n                                <div onClick={() => deleteEntry(index)}>\r\n                                    <Like/>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Logout/>\r\n            <h1>{getWelcomeMessage()} {formOfAdress + user}\r\n                <br/>\r\n            </h1>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n\r\n\r\n            <h2>Tasks</h2>\r\n            <br/>\r\n            <h5>Task Name</h5>\r\n            <div className={\"d-flex\"} id={\"inputDiv\"}>\r\n                <InputGroup className=\"form-group w-50\">\r\n                    <FormControl\r\n                        aria-label=\"Default\"\r\n                        aria-describedby=\"inputGroup-sizing-default\"\r\n                        value={newEntry.name}\r\n                        onChange={e => setNewEntry(old => ({...old, name: e.target.value}))}\r\n                    />\r\n                </InputGroup>\r\n                <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={saveEntry}>Add</Button>\r\n            </div>\r\n            <br/>\r\n            <br/>\r\n            <BetterTable/>\r\n            <br/>\r\n            <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={deleteAll}>Delete All</Button>\r\n            <br/>\r\n            <br/>\r\n\r\n            <Settings/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <Statistics/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Like() {\r\n    return (<Square/>)\r\n}\r\n","import {FormControl, InputGroup, Button} from \"react-bootstrap\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport './App.css';\r\nimport firebase from \"firebase\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport Main from \"./Main\";\r\n\r\n\r\nexport default function Login() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [pwFromDatabase, setPwFromDatabase] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n    const history = useHistory();\r\n\r\n    function onLogin() {\r\n        findPassword()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(password !== '' || pwFromDatabase !== '') {\r\n            if (password === pwFromDatabase) {\r\n                console.log(\"login successful\")\r\n                localStorage.setItem('username', username);\r\n                history.push(\"/semeru\")\r\n                setErrorMessage(\"\")\r\n\r\n            } else {\r\n                setErrorMessage(\"Incorrect password\")\r\n\r\n            }\r\n        }\r\n    }, [pwFromDatabase])\r\n\r\n    function findPassword() {\r\n        // on() method\r\n        firebase.database().ref('usernames/' + username + '/security').on('value', (snap) => {\r\n            if (snap.val()) {\r\n                console.log(\"snap.val()\", snap.val())\r\n                setPwFromDatabase(snap.val().password)\r\n\r\n\r\n            } else {\r\n                setErrorMessage(\"Incorrect Username\")\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Semeru</h1><br/>\r\n            <h2>Login</h2>\r\n            <div className={\"d-flex\"} id={\"inputDiv\"}>\r\n                <InputGroup className={\"form-group w-50\"}>\r\n                    <FormControl\r\n                        aria-label=\"Default\"\r\n                        placeholder=\"Username\"\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}>\r\n                    </FormControl>\r\n                </InputGroup>\r\n            </div>\r\n            <br/>\r\n            <div className={\"d-flex\"} id={\"inputDiv\"}>\r\n                <InputGroup className={\"form-group w-50\"}>\r\n                    <FormControl\r\n                        aria-label=\"Default\"\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}>\r\n                    </FormControl>\r\n                </InputGroup>\r\n            </div>\r\n            <h6 id={\"errormessage\"}>{errorMessage}</h6>\r\n            <br/>\r\n            <Button style={{background:\"#526b4d\", border:\"#526b4d\"}} onClick={() => onLogin()}>Login</Button>\r\n            <br/>\r\n            <h6>Don't have an account yet? <NavLink className={\"normalLink\"} to=\"/registration\">Register</NavLink></h6>\r\n        </div>\r\n    );\r\n}","import {FormControl, InputGroup, Button, DropdownButton, Dropdown} from \"react-bootstrap\";\r\nimport React, {useState} from \"react\";\r\nimport './App.css';\r\nimport firebase from \"firebase\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport default function Registration() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [firstPw, setFirstPw] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [dropdownValue, setDropdownValue] = useState('')\r\n\r\n    let formOfAdress = [{value: \"Mr. \"}, {value: \"Ms. \"}, {value: \"Mrs. \"}]\r\n\r\n    const history = useHistory();\r\n\r\n    function storeUser() {\r\n        firebase.database().ref('usernames/' + username + '/security/password').set(password)\r\n        firebase.database().ref('usernames/' + username + '/security/formOfAdress').set(dropdownValue)\r\n    }\r\n\r\n    async function getUsername() {\r\n        // on() method\r\n        const snap = await firebase.database().ref('usernames/' + username).get();\r\n        if (snap.val()) {\r\n            console.log(snap.val())\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    async function validate() {\r\n        const isUserAlreadyUsed = await getUsername();\r\n\r\n        if (!isUserAlreadyUsed) {\r\n            if (firstPw === password) {\r\n                if (username.length > 1) {\r\n                    storeUser()\r\n                    console.log(username)\r\n                    history.push(\"/login\")\r\n                } else {\r\n                    setErrorMessage(\"Username too short\")\r\n                }\r\n            } else {\r\n                setErrorMessage(\"Passwords do not match\")\r\n            }\r\n        } else {\r\n            setErrorMessage(\"User is already in use\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Semeru</h1><br/>\r\n            <h2>Registration</h2>\r\n            <br/>\r\n\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\"\r\n                                 style={{background: \"#526b4d\", border: \"#526b4d\"}}>\r\n                    Form of Adress\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    {formOfAdress.map((adress, index) => <Dropdown.Item\r\n                        key={index}\r\n                        onClick={() => setDropdownValue(adress.value)}>{adress.value}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <br/>\r\n\r\n            <div className={\"d-flex\"} id={\"inputDiv\"}>\r\n                <InputGroup className={\"form-group w-50\"}>\r\n                    <FormControl\r\n                        aria-label=\"Default\"\r\n                        placeholder=\"Username\"\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}>\r\n\r\n                    </FormControl>\r\n                </InputGroup>\r\n            </div>\r\n\r\n            <br/>\r\n\r\n            <div className={\"d-flex\"} id={\"inputDiv\"}>\r\n                <InputGroup className={\"form-group w-50\"}>\r\n                    <FormControl\r\n                        aria-label=\"Default\" type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={firstPw}\r\n                        onChange={e => setFirstPw(e.target.value)}\r\n                    >\r\n                    </FormControl>\r\n                </InputGroup>\r\n            </div>\r\n\r\n            <br/>\r\n\r\n            <div className={\"d-flex\"} id={\"inputDiv\"}>\r\n                <InputGroup className={\"form-group w-50\"}>\r\n                    <FormControl\r\n                        aria-label=\"Default\" type=\"password\"\r\n                        placeholder=\"Confirm Password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}>\r\n                    </FormControl>\r\n                </InputGroup>\r\n            </div>\r\n            <h6 id={\"errormessage\"}>{errorMessage}</h6>\r\n            <br/>\r\n            <Button style={{background: \"#526b4d\", border: \"#526b4d\"}} onClick={() => validate()}>Sign\r\n                Up</Button>\r\n            <h6>Already have an account? <NavLink className={\"normalLink\"} to=\"/login\">Sign in</NavLink></h6>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","import './App.css';\nimport React from \"react\";\nimport {Switch, Route, Redirect, HashRouter} from \"react-router-dom\";\nimport Main from './Main.js'\nimport Login from './Login.js'\nimport Registration from './Registration.js'\nimport firebase from 'firebase'\n\n\n// todo laufende task gelöscht\n// todo account security\n\nexport default function App() {\n\n\n    return (\n        <div>\n            <HashRouter>\n                <Switch>\n                    <Route path={'/login'} component={Login} basename={process.env.PUBLIC_URL}/>\n                    <Route path={'/registration'} component={Registration} basename={process.env.PUBLIC_URL}/>\n                    <Route path={'/semeru'} component={Main} basename={process.env.PUBLIC_URL}/>\n                    <Route path={'/'} basename={process.env.PUBLIC_URL}>\n                        <Redirect to=\"/login\"/>\n                    </Route>\n\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Login from \"./Login\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from \"./App\";\nimport firebase from \"firebase\";\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBbzX_9Vp3RqNkR7Ky8Z42HNTIj07VKWGA\",\n    authDomain: \"semeru-7eac8.firebaseapp.com\",\n    databaseURL: \"https://semeru-7eac8-default-rtdb.firebaseio.com\",\n    projectId: \"semeru-7eac8\",\n    storageBucket: \"semeru-7eac8.appspot.com\",\n    messagingSenderId: \"652725791499\",\n    appId: \"1:652725791499:web:2ab8295068db2719df100e\",\n    measurementId: \"G-7BD6XZ6BY1\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}